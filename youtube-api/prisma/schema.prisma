// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  bio       String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  channel       Channel?
  videos        Video[]
  comments      Comment[]
  subscriptions Subscription[]
  playlists     Playlist[]

  @@index([username])
  @@index([email])
}

model Channel {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  avatar      String?
  banner      String?
  customUrl   String?  @unique
  subscribers Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos        Video[]
  subscriptions Subscription[]

  @@index([name])
  @@index([customUrl])
}

model Video {
  id          String   @id @default(uuid())
  title       String
  description String?
  thumbnail   String?
  videoUrl    String
  duration    Int      @default(0)
  visibility  String   @default("public")
  category    String?
  tags        String[]
  views       Int      @default(0)
  likes       Int      @default(0)
  dislikes    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  channelId String
  channel   Channel    @relation(fields: [channelId], references: [id], onDelete: Cascade)
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  playlists PlaylistVideo[]

  @@index([title])
  @@index([channelId])
  @@index([category])
  @@index([visibility])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  videoId  String
  video    Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId String?
  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies  Comment[] @relation("CommentReplies")

  @@index([videoId])
  @@index([userId])
  @@index([parentId])
}

model Subscription {
  id                 String   @id @default(uuid())
  notificationEnabled Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId])
  @@index([userId])
  @@index([channelId])
}

model Playlist {
  id          String   @id @default(uuid())
  title       String
  description String?
  visibility  String   @default("public")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos PlaylistVideo[]

  @@index([userId])
  @@index([visibility])
}

model PlaylistVideo {
  id        String   @id @default(uuid())
  position  Int
  createdAt DateTime @default(now())

  // Relations
  playlistId String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  videoId    String
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([playlistId, videoId])
  @@index([playlistId])
  @@index([videoId])
}
